from fastapi import APIRouter, HTTPException, Depends
from server.models.data import DataView
from server.models.database import ProjectRecord, NodeOutputRecord, get_async_session, AsyncSession
from loguru import logger

router = APIRouter()

@router.get(
    "/{data_id}",
    status_code=200,
    responses={
        200: {"description": "Data retrieved successfully", "model": DataView},
        404: {"description": "Data not found"},
        403: {"description": "User has no access to this data"},
        500: {"description": "Internal server error"},
    },
)
async def get_node_data(data_id: int, db_client: AsyncSession = Depends(get_async_session)) -> DataView:
    """
    Get the data generated by a node.
    """
    user_id = 1  # for debug
    try:
        # 1. get data row from db
        data_record = await db_client.get(NodeOutputRecord, data_id)
        if data_record is None:
            raise HTTPException(status_code=404, detail="Data not found")
        # 2. check user access right here
        db_project = await db_client.get(ProjectRecord, data_record.project_id)
        if db_project is None or db_project.owner_id != user_id:  # type: ignore
            raise HTTPException(
                status_code=403, detail="User has no access to this data"
            )
        return DataView.model_validate(data_record.data)
    except Exception as e:
        logger.exception(f"Error retrieving node data {data_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))
