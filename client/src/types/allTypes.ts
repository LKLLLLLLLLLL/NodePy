/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/project/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Graph
         * @description Get the node graph for a project.
         */
        get: operations["get_graph_api_project__project_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync Graph
         * @description Save a node graph to the database, if topology changed, enqueue a task to execute it.
         *     If decide to execute, enqueues a Celery task. Use
         *     the returned `task_id` to subscribe to the websocket status endpoint
         *     `/nodes/status/{task_id}`.
         */
        post: operations["sync_graph_api_project_sync_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/data/{data_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Node Data
         * @description Get the data generated by a node.
         */
        get: operations["get_node_data_api_project_data__data_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/upload/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File
         * @description Upload a file to a project. Return the saved file info.
         */
        post: operations["upload_file_api_files_upload__project_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File Content
         * @description Get the content of a file by its key and project id.
         *     The project id is used to verify the access permission.
         *
         *     **important: if user want to re upload a file, you need to delete the old file first,
         *     otherwise the file space may not be released.**
         */
        get: operations["get_file_content_api_files__key__get"];
        put?: never;
        post?: never;
        /**
         * Delete File
         * @description Delete a file by its key and project id.
         *     The project id is used to verify the access permission.
         */
        delete: operations["delete_file_api_files__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Files */
        get: operations["list_files_api_files_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_file_api_files_upload__project_id__post */
        Body_upload_file_api_files_upload__project_id__post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * ColType
         * @enum {string}
         */
        ColType: "int" | "float" | "str" | "bool" | "datetime";
        /**
         * DataView
         * @description A dict-like view of data, for transmitting or json serialization.
         */
        DataView: {
            /**
             * Type
             * @enum {string}
             */
            type: "int" | "float" | "str" | "bool" | "Table" | "File";
            /** Value */
            value: components["schemas"]["TableView"] | string | number | boolean | components["schemas"]["File"];
        };
        /**
         * DataZip
         * @description A lightweight representation of data,
         *     it store only the url of the data object.
         */
        DataZip: {
            /** Url */
            url: string;
        };
        /** DeleteResponse */
        DeleteResponse: {
            /** Status */
            status: string;
        };
        /** Edge */
        Edge: {
            /** Id */
            id: string;
            /** Src */
            src: string;
            /** Src Port */
            src_port: string;
            /** Tar */
            tar: string;
            /** Tar Port */
            tar_port: string;
        };
        /**
         * File
         * @description A abstract file class to represent files managed by FileManager.
         */
        File: {
            /** Key */
            key: string;
            /** Filename */
            filename: string;
            /**
             * Format
             * @enum {string}
             */
            format: "png" | "jpg" | "pdf" | "csv";
            /** Size */
            size: number;
        };
        /**
         * FileItem
         * @description The file item showed in the file list.
         */
        FileItem: {
            /** Key */
            key: string;
            /** Filename */
            filename: string;
            /**
             * Format
             * @enum {string}
             */
            format: "png" | "jpg" | "pdf" | "csv";
            /** Size */
            size: number;
            /** Uploaded At */
            uploaded_at: string;
            /** Project Name */
            project_name: string;
        };
        /**
         * Graph
         * @description A unified data structure for all data for a node graph.
         */
        "Graph-Input": {
            /** Project Name */
            project_name: string;
            /** Project Id */
            project_id: number;
            /** User Id */
            user_id: number;
            /** Error Message */
            error_message?: string | null;
            /** Nodes */
            nodes: components["schemas"]["Node-Input"][];
            /** Edges */
            edges: components["schemas"]["Edge"][];
        };
        /**
         * Graph
         * @description A unified data structure for all data for a node graph.
         */
        "Graph-Output": {
            /** Project Name */
            project_name: string;
            /** Project Id */
            project_id: number;
            /** User Id */
            user_id: number;
            /** Error Message */
            error_message?: string | null;
            /** Nodes */
            nodes: components["schemas"]["Node-Output"][];
            /** Edges */
            edges: components["schemas"]["Edge"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Node */
        "Node-Input": {
            /** Id */
            id: string;
            /** Type */
            type: string;
            /**
             * @default {
             *       "x": 0,
             *       "y": 0
             *     }
             */
            position: components["schemas"]["Position"];
            /**
             * Param
             * @default {}
             */
            param: {
                [key: string]: unknown;
            };
            /** Runningtime */
            runningtime?: number | null;
            /**
             * Schema Out
             * @default {}
             */
            schema_out: {
                [key: string]: components["schemas"]["Schema-Input"];
            };
            /**
             * Data Out
             * @default {}
             */
            data_out: {
                [key: string]: components["schemas"]["DataZip"];
            };
            error?: components["schemas"]["NodeError"] | null;
        };
        /** Node */
        "Node-Output": {
            /** Id */
            id: string;
            /** Type */
            type: string;
            /**
             * @default {
             *       "x": 0,
             *       "y": 0
             *     }
             */
            position: components["schemas"]["Position"];
            /**
             * Param
             * @default {}
             */
            param: {
                [key: string]: unknown;
            };
            /** Runningtime */
            runningtime?: number | null;
            /**
             * Schema Out
             * @default {}
             */
            schema_out: {
                [key: string]: components["schemas"]["Schema-Output"];
            };
            /**
             * Data Out
             * @default {}
             */
            data_out: {
                [key: string]: components["schemas"]["DataZip"];
            };
            error?: components["schemas"]["NodeError"] | null;
        };
        /** NodeError */
        NodeError: {
            /** Param */
            param: string | null;
            /** Input */
            input: string[] | null;
            /** Message */
            message: string;
        };
        /** NothingTodoResponse */
        NothingTodoResponse: Record<string, never>;
        /** Position */
        Position: {
            /** X */
            x: number;
            /** Y */
            y: number;
        };
        /** Schema */
        "Schema-Input": {
            type: components["schemas"]["Type"];
            tab?: components["schemas"]["TableSchema"] | null;
        };
        /** Schema */
        "Schema-Output": {
            type: components["schemas"]["Type"];
            tab?: components["schemas"]["TableSchema"] | null;
        };
        /**
         * TableSchema
         * @description The schema of Table data.
         */
        TableSchema: {
            /** Col Types */
            col_types: {
                [key: string]: components["schemas"]["ColType"];
            };
        };
        /** TableView */
        TableView: {
            /** Cols */
            cols: {
                [key: string]: (string | boolean | number)[];
            };
            /** Col Types */
            col_types: {
                [key: string]: string;
            };
        };
        /**
         * TaskResponse
         * @description Response returned when a task is submitted.
         */
        TaskResponse: {
            /** Task Id */
            task_id: string;
        };
        /**
         * Type
         * @enum {string}
         */
        Type: "Table" | "str" | "int" | "bool" | "float" | "File";
        /**
         * UserFileList
         * @description The list of files owned by a user.
         */
        UserFileList: {
            /** User Id */
            user_id: number;
            /** Files */
            files: components["schemas"]["FileItem"][];
            /** Total Size */
            total_size: number;
            /** Used Size */
            used_size: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_graph_api_project__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Graph retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Graph-Output"];
                };
            };
            /** @description User has no access to this project */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Project or graph not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sync_graph_api_project_sync_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Graph-Input"];
            };
        };
        responses: {
            /** @description Task accepted and running */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description User has no access to this project */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_node_data_api_project_data__data_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataView"];
                };
            };
            /** @description User has no access to this data */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upload_file_api_files_upload__project_id__post: {
        parameters: {
            query: {
                node_id: string;
            };
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_api_files_upload__project_id__post"];
            };
        };
        responses: {
            /** @description File uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"];
                };
            };
            /** @description Bad Request - invalid file or parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Insufficient Storage - user storage limit exceeded */
            507: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_file_content_api_files__key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Binary file content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/octet-stream": string;
                };
            };
            /** @description Forbidden - not allowed to access this file */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_file_api_files__key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "status": "success"
                     *     }
                     */
                    "application/json": components["schemas"]["DeleteResponse"];
                };
            };
            /** @description Forbidden - not allowed to access this file */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_files_api_files_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of files for the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFileList"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
